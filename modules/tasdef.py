from typing import Callable
import pyautogui
import datetime
import typing
import numpy
import PIL

import modules.documents.document
import modules.documents.passport

class TASDef:
    DEBUG: typing.ClassVar[bool]
    DAY3_PICTURE_CHECK: typing.ClassVar[bool]
    DAY4_PICTURE_CHECK: typing.ClassVar[bool]
    ID_CHECK: typing.ClassVar[bool]
    APPEARANCE_HEIGHT_CHECK: typing.ClassVar[bool]
    WANTED_CHECK: typing.ClassVar[bool]
    PROGRAM_DIR: typing.ClassVar[str]
    RUNS_DIR: typing.ClassVar[str]
    ASSETS: typing.ClassVar[str]
    DAY_1: typing.ClassVar[datetime.date]
    DAY_2: typing.ClassVar[datetime.date]
    DAY_3: typing.ClassVar[datetime.date]
    DAY_5: typing.ClassVar[datetime.date]
    DAY_7: typing.ClassVar[datetime.date]
    DAY_11: typing.ClassVar[datetime.date]
    DAY_14: typing.ClassVar[datetime.date]
    DAY_18: typing.ClassVar[datetime.date]
    DAY_19: typing.ClassVar[datetime.date]
    DAY_20: typing.ClassVar[datetime.date]
    DAY_24: typing.ClassVar[datetime.date]
    DAY_25: typing.ClassVar[datetime.date]
    DAY_27: typing.ClassVar[datetime.date]
    DAY_28: typing.ClassVar[datetime.date]
    DAY_29: typing.ClassVar[datetime.date]
    RUNS: typing.ClassVar[list]
    DOCUMENTS: typing.ClassVar[list[modules.documents.document.Document]]
    MOA_SEALS: typing.ClassVar[tuple[PIL.Image.Image, ...]]
    PASSPORT_TYPES: typing.ClassVar[tuple[modules.documents.passport.PassportType, ...]]
    NEXT_BUBBLE: typing.ClassVar[numpy.ndarray]
    MATCHING_DATA: typing.ClassVar[PIL.Image.Image]
    MATCHING_DATA_LINES: typing.ClassVar[PIL.Image.Image]
    VISA_SLIP: typing.ClassVar[PIL.Image.Image]
    WEIGHT_BG: typing.ClassVar[numpy.ndarray]
    WEIGHT_FILTER: typing.ClassVar[numpy.ndarray]
    BUTTONS: typing.ClassVar[dict[str, PIL.Image.Image]]
    DOLLAR_SIGN: typing.ClassVar[PIL.Image.Image]
    WANTED_CRIMINALS: typing.ClassVar[PIL.Image.Image]
    NO_CORRELATION: typing.ClassVar[PIL.Image.Image]
    SCREW: typing.ClassVar[PIL.Image.Image]
    WIRES: typing.ClassVar[PIL.Image.Image]
    TRANQ_GUN_KEYHOLE: typing.ClassVar[PIL.Image.Image]
    SNIPER_KEYHOLE: typing.ClassVar[PIL.Image.Image]
    DARTS: typing.ClassVar[PIL.Image.Image]
    BULLETS: typing.ClassVar[PIL.Image.Image]
    SEIZURE_SLIP: typing.ClassVar[PIL.Image.Image]
    TICKS: typing.ClassVar[dict[str, PIL.Image.Image]]
    GIVE_BANNER: typing.ClassVar[PIL.Image.Image]
    PASSPORT_KORDON_KALLO: typing.ClassVar[PIL.Image.Image]
    SEX_F_GENERIC: typing.ClassVar[numpy.ndarray]
    SEX_M_OBRISTAN: typing.ClassVar[numpy.ndarray]
    FONTS: typing.ClassVar[dict[str, PIL.ImageFont.FreeTypeFont | dict[str, numpy.ndarray]]]
    NAMES: typing.ClassVar[dict[str, dict[modules.documents.passport.Sex, set[str]]]]
    checkHorn: bool
    allowWrongWeight: bool
    wrongWeight: bool
    skipReason: bool
    needId: bool
    newData: bool
    poison: bool
    doConfiscate: bool
    confiscate: bool
    detain: bool
    skipGive: bool
    needObri: int
    sTime: float | None
    endingsTime: dict[int, float]
    weight: int | None
    lastGiveArea: numpy.ndarray | None
    wanted: list[tuple[int, int]]
    documentStack: typing.Any
    transcription: typing.Any
    date: datetime.date

    def allowAndGive(self, *, close: bool = False, waitClose: bool = True) -> None: ...
    def allowWithPassport(self, pos: int) -> None: ...
    def click(self, at: tuple[int, int]) -> None: ...
    def clickOnTick(self, tick: str) -> None: ...
    def compareDocs(self, leftPos: int, rightPos: int, moved: bool = True) -> None: ...
    def comparePassportAndDoc(self, pos: int) -> None: ...
    def day13Check(self) -> bool: ...
    def day15Bomb(self) -> None: ...
    def day18Check(self) -> bool: ...
    def day1Check(self) -> bool: ...
    def day21Check(self) -> bool: ...
    def day26Check(self, *, nextCheck: bool = True) -> bool: ...
    def day27Check(self, *, nextCheck: bool = True) -> bool: ...
    def day2Check(self, *, wrong: bool) -> bool: ...
    def day3Check(self) -> bool: ...
    def day4Check(self) -> bool: ...
    def day6Check(self) -> bool: ...
    def day8Check(self) -> bool: ...
    def dayEnd(self) -> None: ...
    def daySetup(self) -> None: ...
    def denyAndGive(self, *, close: bool = False, waitClose: bool = True) -> None: ...
    def denyAndGiveWithReason(self, *, close: bool = False, waitClose: bool = True) -> None: ...
    def detectPeople(self, area: tuple[int, int, int, int], *, tranq: bool = False) -> tuple[tuple[int, int], ...]: ...
    def docScan(self, *, move: bool = True) -> modules.documents.document.Document | modules.documents.passport.Passport | modules.documents.passport.Nation | None: ...
    def dragTo(self, at: tuple[int, int]) -> None: ...
    def dragToWithGive(self, at: tuple[int, int]) -> None: ...
    def endAllow(self) -> None: ...
    def ending(self, endingN: int, clicks: int, *, credits: bool = False) -> None: ...
    def ending1(self) -> None: ...
    def ending10(self) -> None: ...
    def ending11(self) -> None: ...
    def ending12(self) -> None: ...
    def ending13(self) -> None: ...
    def ending14(self) -> None: ...
    def ending15(self) -> None: ...
    def ending16(self) -> None: ...
    def ending17(self) -> None: ...
    def ending18(self) -> None: ...
    def ending19(self) -> None: ...
    def ending2(self) -> None: ...
    def ending20(self) -> None: ...
    def ending3(self) -> None: ...
    def ending4(self) -> None: ...
    def ending5(self) -> None: ...
    def ending6(self) -> None: ...
    def ending7(self) -> None: ...
    def ending8(self) -> None: ...
    def ending9(self) -> None: ...
    def endingTime(self, endingN: int) -> float: ...
    def ezicMessenger(self, *, nextCheck: bool = True) -> None: ...
    def fastPassportScan(self, before: numpy.ndarray, after: numpy.ndarray) -> modules.documents.passport.Nation: ...
    def getAllDocs(self, *, nextCheck: bool = True) -> tuple[bool, bool]: ...
    def getRulebook(self) -> dict[str, dict | tuple[int, int]]: ...
    def getScreen(self) -> PIL.Image.Image: ...
    def getSniper(self) -> None: ...
    def getTranqGun(self) -> None: ...
    @classmethod
    def getWinHWDN() -> str: ...
    def giveAllDocs(self) -> None: ...
    def giveAllGiveAreaDocs(self, before: numpy.ndarray, *, delay: bool = False) -> None: ...
    def goToWantedCriminals(self) -> None: ...
    def handleAccessPermitWithReason(self) -> bool: ...
    def handleArstotzkanId(self) -> bool: ...
    def handleArstotzkanIdWithReason(self) -> bool: ...
    def handleConfiscate(self, pos: tuple[int, int], *, detain: bool = False) -> None: ...
    def handleConfiscateAndDetain(self, pos: tuple[int, int]) -> bool: ...
    def handleDiplomaticAuth(self) -> bool: ...
    def handleDiplomaticAuthWithReason(self) -> bool: ...
    def handleEntryPermit(self) -> bool: ...
    def handleEntryPermitWithReason(self) -> bool: ...
    def handleGrantOfAsylumWithReason(self) -> bool: ...
    def handleIdSuppl(self) -> bool: ...
    def handleIdSupplWithReason(self) -> bool: ...
    def handleNoDocs(self) -> bool: ...
    def handlePurposeDuration(self) -> bool: ...
    def handlePurposeDurationWithReason(self, permitType: type, alignFn: Callable[[tuple[int, int, int, int]], tuple[int, int]]) -> bool: ...
    def handleVaxCertWithReason(self) -> bool: ...
    def handleWorkPass(self) -> bool: ...
    def handleWorkPassWithReason(self, permitType: type) -> bool: ...
    def interrogate(self) -> None: ...
    def interrogateAndDeny(self, leftPos: int, rightPos: int, delaySub: float = 0) -> None: ...
    def interrogateAndDenyWithPassport(self, pos: int, delaySub: float = 0) -> None: ...
    def interrogateFailsafe(self) -> bool: ...
    def interrogateMissingDoc(self, rule: str) -> bool: ...
    def knownCriminal(self, checkFn: Callable) -> None: ...
    def missingDoc(self, rule: str, type_: type) -> bool: ...
    def mouseOffset(self, x: int, y: int) -> tuple[int, int]: ...
    def moveTo(self, at: tuple[int, int]) -> None: ...
    def multiDocAction(self, allow: bool, *, nextCheck: bool = True, force: bool = False) -> bool: ...
    def multiDocNoPassport(self, denyWhen: Callable[[modules.documents.passport.Passport], bool], forceAllow: bool = False) -> bool: ...
    def newGame(self) -> None: ...
    def next(self) -> bool: ...
    def nextPartial(self) -> bool: ...
    def noConfiscate(self, fn: Callable): ...
    def noPassport(self, *, backToIndex: bool = True) -> None: ...
    def noPictureCheck(self, func: Callable) -> None: ...
    def passportCheck(self, before: numpy.ndarray, befCheck: bool, denyWhen: Callable[[modules.documents.passport.Passport], bool]) -> bool: ...
    def passportOnlyAllow(self, *, nextCheck: bool = True) -> bool: ...
    def passportOnlyDeny(self, *, nextCheck: bool = True) -> bool: ...
    def prepareItem(self, pos: tuple[int, int]) -> None: ...
    def putCompareDocsBack(self, leftPos: int, rightPos: int) -> None: ...
    def putRulebookBack(self) -> None: ...
    def restartFrom(self, day: tuple[int, int], date: datetime.date, story: bool = True) -> None: ...
    def run(self) -> None: ...
    @staticmethod
    def select(msg: str, options: list) -> int: ...
    def startRun(self) -> None: ...
    def story(self) -> None: ...
    def waitFor(self, button: PIL.Image.Image, *, move: bool = True) -> pyautogui.Point: ...
    def waitForAllTicks(self) -> None: ...
    def waitForAreaChange(self, area: tuple[int, int, int, int]) -> numpy.ndarray: ...
    def waitForDoorChange(self) -> None: ...
    def waitForGiveAreaChange(self, *, update: bool = True, sleep: bool = True) -> None: ...
    def waitForSleepButton(self) -> None: ...
